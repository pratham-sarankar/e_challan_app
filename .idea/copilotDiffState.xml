<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/lib/pages/payment_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/payment_page.dart" />
              <option name="originalContent" value="import 'package:barcode_widget/barcode_widget.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:intl/intl.dart';&#10;import 'package:municipal_e_challan/models/payment_models.dart';&#10;import 'package:municipal_e_challan/services/payment_service.dart';&#10;import 'package:pdf/pdf.dart';&#10;import 'package:pdf/widgets.dart' as pw;&#10;import 'package:printing/printing.dart';&#10;&#10;import 'dashboard_page.dart';&#10;&#10;/// Payment Page with BLoC integration for ICICI POS payments&#10;/// Provides multiple payment options: Card (POS), UPI, and Cash&#10;class PaymentPage extends StatelessWidget {&#10;  // index may be null if a full challan map is provided directly.&#10;  final int? index;&#10;&#10;  // Optional challan map - prefer this when provided to avoid indexing into the global list.&#10;  final Map&lt;String, dynamic&gt;? challan;&#10;&#10;  const PaymentPage({super.key, this.index, this.challan});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // Resolve challan map safely. Prefer provided challan, then try index lookup when valid,&#10;    // otherwise fall back to an empty map to avoid RangeError.&#10;    Map&lt;String, dynamic&gt; resolvedChallan = {};&#10;    int resolvedIndex = index ?? 0;&#10;    if (challan != null) {&#10;      resolvedChallan = Map&lt;String, dynamic&gt;.from(challan!);&#10;      // attempt to find its index in DashboardPage list if possible&#10;      final idx = DashboardPage.challans.indexWhere((c) {&#10;        try {&#10;          return c == resolvedChallan ||&#10;              (c['id'] != null &amp;&amp; c['id'] == resolvedChallan['id']);&#10;        } catch (_) {&#10;          return false;&#10;        }&#10;      });&#10;      if (idx != -1) resolvedIndex = idx;&#10;    } else if (index != null &amp;&amp;&#10;        index! &gt;= 0 &amp;&amp;&#10;        index! &lt; DashboardPage.challans.length) {&#10;      resolvedIndex = index!;&#10;      resolvedChallan = Map&lt;String, dynamic&gt;.from(&#10;        DashboardPage.challans[resolvedIndex],&#10;      );&#10;    } else if (DashboardPage.challans.isNotEmpty) {&#10;      // fallback to first challan if available&#10;      resolvedChallan = Map&lt;String, dynamic&gt;.from(DashboardPage.challans[0]);&#10;      resolvedIndex = 0;&#10;    } else {&#10;      resolvedChallan = &lt;String, dynamic&gt;{};&#10;      resolvedIndex = 0;&#10;    }&#10;&#10;    final amount = resolvedChallan['amount']?.toString() ?? '0';&#10;    // Use a raw challan id internally (prefer explicit id field if present)&#10;    final rawChallanId =&#10;        (resolvedChallan['id']?.toString() ?? (resolvedIndex + 1).toString());&#10;    // Display-friendly challan id for UI&#10;    final challanId = 'CHALLAN_$rawChallanId';&#10;    final violatorName = resolvedChallan['name'] ?? '';&#10;    final violatorMobile = resolvedChallan['mobile'] ?? '';&#10;&#10;    // Create PaymentPageView (BLoC removed - using PaymentService directly)&#10;    return PaymentPageView(&#10;      index: resolvedIndex,&#10;      challan: resolvedChallan,&#10;      amount: amount,&#10;      challanId: challanId,&#10;      rawChallanId: rawChallanId,&#10;      violatorName: violatorName,&#10;      violatorMobile: violatorMobile,&#10;    );&#10;  }&#10;}&#10;&#10;/// Payment Page View Widget - handles UI rendering&#10;class PaymentPageView extends StatefulWidget {&#10;  final int index;&#10;  final Map&lt;String, dynamic&gt; challan;&#10;  final String amount;&#10;  final String challanId; // display id&#10;  final String rawChallanId; // actual challan id to use as bill number&#10;  final String violatorName;&#10;  final String violatorMobile;&#10;&#10;  const PaymentPageView({&#10;    super.key,&#10;    required this.index,&#10;    required this.challan,&#10;    required this.amount,&#10;    required this.challanId,&#10;    required this.rawChallanId,&#10;    required this.violatorName,&#10;    required this.violatorMobile,&#10;  });&#10;&#10;  @override&#10;  State&lt;PaymentPageView&gt; createState() =&gt; _PaymentPageViewState();&#10;}&#10;&#10;class _PaymentPageViewState extends State&lt;PaymentPageView&gt; {&#10;  late final IPaymentService _paymentService;&#10;  bool _isProcessing = false;&#10;  String _processingMessage = '';&#10;  PaymentTransaction? _transaction;&#10;  String? _errorMessage;&#10;  bool _posNotInstalled = false;&#10;  List&lt;String&gt; _availablePaymentMethods = PaymentConfig.defaultConfig.supportedPaymentMethods;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _paymentService = PaymentServiceFactory.create(useMock: false);&#10;    _checkPosAvailability();&#10;  }&#10;&#10;  Future&lt;void&gt; _checkPosAvailability() async {&#10;    final installed = await _paymentService.isPosAppInstalled();&#10;    setState(() {&#10;      _posNotInstalled = !installed;&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(title: const Text(&quot;Payment Options&quot;), elevation: 0),&#10;      body: SingleChildScrollView(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            _buildChallanInfoCard(context),&#10;            const SizedBox(height: 24),&#10;            _buildPaymentAmountCard(),&#10;            const SizedBox(height: 24),&#10;            _buildPaymentOptions(context),&#10;            const SizedBox(height: 12),&#10;            _buildHelpInfo(),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build the payment UI based on current state&#10;  Widget _buildPaymentOptions(BuildContext context) {&#10;    if (_posNotInstalled) {&#10;      return _buildPosNotInstalledCard(&#10;        'ICICI POS integration is not available on this device. Please install/configure the POS plugin or use other payment options.',&#10;        context,&#10;      );&#10;    }&#10;&#10;    if (_isProcessing) {&#10;      return _buildProcessingCard(_processingMessage.isNotEmpty&#10;          ? _processingMessage&#10;          : 'Processing...');&#10;    }&#10;&#10;    if (_transaction != null) {&#10;      return _buildSuccessCard(context, _transaction!);&#10;    }&#10;&#10;    if (_errorMessage != null) {&#10;      return _buildFailureCard(_errorMessage!, context);&#10;    }&#10;&#10;    // Default: show available payment methods&#10;    return _buildPaymentMethodsCard(context);&#10;  }&#10;&#10;  /// Build challan information card&#10;  Widget _buildChallanInfoCard(BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(20),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Row(&#10;              children: [&#10;                Icon(&#10;                  Icons.receipt_long,&#10;                  color: Theme.of(context).colorScheme.primary,&#10;                ),&#10;                const SizedBox(width: 12),&#10;                Text(&#10;                  &quot;Challan Information&quot;,&#10;                  style: Theme.of(&#10;                    context,&#10;                  ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),&#10;                ),&#10;              ],&#10;            ),&#10;            const SizedBox(height: 16),&#10;            _buildInfoRow(&quot;Challan ID&quot;, widget.challanId),&#10;            _buildInfoRow(&quot;Violator Name&quot;, widget.violatorName),&#10;            _buildInfoRow(&quot;Mobile&quot;, widget.violatorMobile),&#10;            _buildInfoRow(&quot;Rule Violated&quot;, widget.challan['rule'] ?? ''),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build payment amount card&#10;  Widget _buildPaymentAmountCard() {&#10;    // Ensure the card expands to the full available width&#10;    return SizedBox(&#10;      width: double.infinity,&#10;      child: Card(&#10;        elevation: 4,&#10;        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;        child: Container(&#10;          width: double.infinity,&#10;          padding: const EdgeInsets.all(24),&#10;          child: Column(&#10;            crossAxisAlignment: CrossAxisAlignment.start,&#10;            children: [&#10;              Text(&#10;                &quot;Payable Amount&quot;,&#10;                style: TextStyle(fontSize: 18, color: Colors.grey[600]),&#10;              ),&#10;              const SizedBox(height: 8),&#10;              Text(&#10;                &quot;â‚¹${widget.amount}&quot;,&#10;                style: TextStyle(&#10;                  fontSize: 36,&#10;                  fontWeight: FontWeight.bold,&#10;                  color: Colors.indigo,&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build payment methods selection card&#10;  Widget _buildPaymentMethodsCard(BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(20),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Text(&#10;              &quot;Select Payment Method&quot;,&#10;              style: Theme.of(&#10;                context,&#10;              ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),&#10;            ),&#10;            const SizedBox(height: 20),&#10;&#10;            // Card Payment Option&#10;            if (_availablePaymentMethods.contains('CARD'))&#10;              _buildPaymentMethodButton(&#10;                context: context,&#10;                icon: Icons.credit_card,&#10;                title: &quot;Card Payment&quot;,&#10;                subtitle: &quot;Pay using debit/credit card via ICICI POS&quot;,&#10;                color: Colors.blue,&#10;                onTap: () =&gt; _startVizpaySale(context),&#10;              ),&#10;&#10;            if (_availablePaymentMethods.contains('CARD'))&#10;              const SizedBox(height: 12),&#10;            // QR Payment Option&#10;            _buildPaymentMethodButton(&#10;              context: context,&#10;              icon: Icons.qr_code,&#10;              title: &quot;UPI Payment&quot;,&#10;              subtitle: &quot;Pay using QR code scanning&quot;,&#10;              color: Colors.teal,&#10;              onTap: () =&gt; _processUpiPayment(context),&#10;            ),&#10;&#10;            const SizedBox(height: 12),&#10;&#10;            // Cash Payment Option&#10;            if (_availablePaymentMethods.contains('CASH'))&#10;              _buildPaymentMethodButton(&#10;                context: context,&#10;                icon: Icons.money,&#10;                title: &quot;Cash Payment&quot;,&#10;                subtitle: &quot;Pay in cash and receive receipt&quot;,&#10;                color: Colors.green,&#10;                onTap: () =&gt; _processCashPayment(context),&#10;              ),&#10;&#10;            if (_availablePaymentMethods.contains('CASH'))&#10;              const SizedBox(height: 12),&#10;&#10;            /*    // BQR Payment Option&#10;            _buildPaymentMethodButton(&#10;              context: context,&#10;              icon: Icons.qr_code_scanner,&#10;              title: &quot;BQR Payment&quot;,&#10;              subtitle: &quot;Pay using Bharat QR code&quot;,&#10;              color: Colors.orange,&#10;              onTap: () =&gt; _processBqrPayment(context),&#10;            );&#10;&#10;            const SizedBox(height: 12),*/&#10;&#10;            /*          // Cash at POS Option&#10;            _buildPaymentMethodButton(&#10;              context: context,&#10;              icon: Icons.point_of_sale,&#10;              title: &quot;Cash at POS&quot;,&#10;              subtitle: &quot;Pay cash at POS terminal&quot;,&#10;              color: Colors.brown,&#10;              onTap: () =&gt; _processCashAtPosPayment(context),&#10;            );*/&#10;&#10;            /*  const SizedBox(height: 12),&#10;&#10;            // Pre-Auth Option&#10;            _buildPaymentMethodButton(&#10;              context: context,&#10;              icon: Icons.lock_clock,&#10;              title: &quot;Pre-Auth Payment&quot;,&#10;              subtitle: &quot;Authorize payment before completion&quot;,&#10;              color: Colors.purple,&#10;              onTap: () =&gt; _processPreAuthPayment(context),&#10;            ),*/&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build individual payment method button&#10;  Widget _buildPaymentMethodButton({&#10;    required BuildContext context,&#10;    required IconData icon,&#10;    required String title,&#10;    required String subtitle,&#10;    required Color color,&#10;    required VoidCallback onTap,&#10;  }) {&#10;    return InkWell(&#10;      onTap: onTap,&#10;      borderRadius: BorderRadius.circular(12),&#10;      child: Container(&#10;        padding: const EdgeInsets.all(16),&#10;        decoration: BoxDecoration(&#10;          border: Border.all(color: color.withAlpha((0.3 * 255).round())),&#10;          borderRadius: BorderRadius.circular(12),&#10;        ),&#10;        child: Row(&#10;          children: [&#10;            Container(&#10;              padding: const EdgeInsets.all(12),&#10;              decoration: BoxDecoration(&#10;                color: color.withAlpha((0.1 * 255).round()),&#10;                borderRadius: BorderRadius.circular(8),&#10;              ),&#10;              child: Icon(icon, color: color, size: 24),&#10;            ),&#10;            const SizedBox(width: 16),&#10;            Expanded(&#10;              child: Column(&#10;                crossAxisAlignment: CrossAxisAlignment.start,&#10;                children: [&#10;                  Text(&#10;                    title,&#10;                    style: const TextStyle(&#10;                      fontSize: 16,&#10;                      fontWeight: FontWeight.bold,&#10;                    ),&#10;                  ),&#10;                  Text(&#10;                    subtitle,&#10;                    style: TextStyle(fontSize: 14, color: Colors.grey[600]),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;            Icon(Icons.arrow_forward_ios, color: color, size: 16),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build UPI payment card with QR code&#10;  Widget _buildUpiPaymentCard(BuildContext context, String qrData) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(20),&#10;        child: Column(&#10;          children: [&#10;            Text(&#10;              &quot;UPI Payment&quot;,&#10;              style: Theme.of(&#10;                context,&#10;              ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),&#10;            ),&#10;            const SizedBox(height: 20),&#10;            Text(&#10;              &quot;Scan QR code using any UPI app&quot;,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;            ),&#10;            const SizedBox(height: 20),&#10;            Container(&#10;              padding: const EdgeInsets.all(16),&#10;              decoration: BoxDecoration(&#10;                borderRadius: BorderRadius.circular(12),&#10;                border: Border.all(color: Colors.grey[300]!),&#10;              ),&#10;              child: BarcodeWidget(&#10;                barcode: Barcode.qrCode(&#10;                  errorCorrectLevel: BarcodeQRCorrectionLevel.high,&#10;                ),&#10;                data: qrData,&#10;                width: 200,&#10;                height: 200,&#10;                color: Colors.indigo,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Municipal Corporation&quot;,&#10;              style: TextStyle(fontSize: 14, color: Colors.grey[600]),&#10;            ),&#10;            const SizedBox(height: 20),&#10;            Row(&#10;              children: [&#10;                Expanded(&#10;                  child: OutlinedButton(&#10;                    onPressed: () {&#10;                      // Cancel UPI flow and reset&#10;                      setState(() {&#10;                        _isProcessing = false;&#10;                        _processingMessage = '';&#10;                        _errorMessage = null;&#10;                      });&#10;                    },&#10;                    child: const Text(&quot;Cancel&quot;),&#10;                  ),&#10;                ),&#10;                const SizedBox(width: 12),&#10;                Expanded(&#10;                  child: ElevatedButton(&#10;                    onPressed: () =&gt; _processUpiPayment(context),&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.green,&#10;                    ),&#10;                    child: const Text(&quot;Payment Done&quot;),&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build processing card&#10;  Widget _buildProcessingCard(String message) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            const CircularProgressIndicator(),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              message,&#10;              style: const TextStyle(fontSize: 16),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build success card&#10;  Widget _buildSuccessCard(BuildContext context, PaymentTransaction transaction) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            Icon(Icons.check_circle, color: Colors.green, size: 64),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Payment Successful!&quot;,&#10;              style: Theme.of(context).textTheme.titleLarge?.copyWith(&#10;                fontWeight: FontWeight.bold,&#10;                color: Colors.green,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 8),&#10;            Text(&#10;              &quot;Receipt Number: ${transaction.receiptNumber}&quot;,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;            ),&#10;            const SizedBox(height: 24),&#10;            SizedBox(&#10;              width: double.infinity,&#10;              child: ElevatedButton.icon(&#10;                onPressed: () =&gt; _showReceiptDialog(context, widget.challan, transaction),&#10;                icon: const Icon(Icons.receipt),&#10;                label: const Text(&quot;View Receipt&quot;),&#10;                style: ElevatedButton.styleFrom(&#10;                  backgroundColor: Colors.green,&#10;                  padding: const EdgeInsets.symmetric(vertical: 16),&#10;                ),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build failure card&#10;  Widget _buildFailureCard(String error, BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            Icon(Icons.error, color: Colors.red, size: 64),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Payment Failed&quot;,&#10;              style: const TextStyle(&#10;                fontSize: 20,&#10;                fontWeight: FontWeight.bold,&#10;                color: Colors.red,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 8),&#10;            Text(&#10;              error,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;            const SizedBox(height: 24),&#10;            SizedBox(&#10;              width: double.infinity,&#10;              child: ElevatedButton(&#10;                onPressed: () {&#10;                  setState(() {&#10;                    _errorMessage = null;&#10;                    _transaction = null;&#10;                    _isProcessing = false;&#10;                  });&#10;                },&#10;                child: const Text(&quot;Try Again&quot;),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build POS not installed card&#10;  Widget _buildPosNotInstalledCard(String message, BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            Icon(Icons.warning, color: Colors.orange, size: 64),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;POS App Not Available&quot;,&#10;              style: const TextStyle(&#10;                fontSize: 20,&#10;                fontWeight: FontWeight.bold,&#10;                color: Colors.orange,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 8),&#10;            Text(&#10;              message,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;            const SizedBox(height: 24),&#10;            SizedBox(&#10;              width: double.infinity,&#10;              child: ElevatedButton(&#10;                onPressed: () {&#10;                  setState(() {&#10;                    _posNotInstalled = false;&#10;                  });&#10;                },&#10;                child: const Text(&quot;Continue with Other Options&quot;),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build loading card&#10;  Widget _buildLoadingCard() {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: const Padding(&#10;        padding: EdgeInsets.all(24),&#10;        child: Center(child: CircularProgressIndicator()),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build cash processing card&#10;  Widget _buildCashProcessingCard() {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            const CircularProgressIndicator(),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Processing Cash Payment...&quot;,&#10;              style: const TextStyle(fontSize: 16),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build help information&#10;  Widget _buildHelpInfo() {&#10;    return Container(&#10;      padding: const EdgeInsets.all(16),&#10;      decoration: BoxDecoration(&#10;        color: Colors.grey[100],&#10;        borderRadius: BorderRadius.circular(12),&#10;      ),&#10;      child: Column(&#10;        children: [&#10;          Icon(Icons.info_outline, color: Colors.indigo, size: 24),&#10;          const SizedBox(height: 8),&#10;          Text(&#10;            &quot;Choose your preferred payment method. All payments are secure and processed through ICICI Bank.&quot;,&#10;            textAlign: TextAlign.center,&#10;            style: TextStyle(fontSize: 14, color: Colors.grey[800]),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build info row for challan details&#10;  Widget _buildInfoRow(String label, String value) {&#10;    return Padding(&#10;      padding: const EdgeInsets.symmetric(vertical: 4),&#10;      child: Row(&#10;        crossAxisAlignment: CrossAxisAlignment.start,&#10;        children: [&#10;          SizedBox(&#10;            width: 100,&#10;            child: Text(&#10;              &quot;$label:&quot;,&#10;              style: TextStyle(&#10;                fontWeight: FontWeight.w500,&#10;                color: Colors.grey[700],&#10;              ),&#10;            ),&#10;          ),&#10;          Expanded(&#10;            child: Text(&#10;              value,&#10;              style: const TextStyle(fontWeight: FontWeight.w500),&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Start card payment using PaymentService directly&#10;  Future&lt;void&gt; _startCardPayment(BuildContext context) async {&#10;    setState(() {&#10;      _isProcessing = true;&#10;      _processingMessage = 'Processing Card Payment...';&#10;      _errorMessage = null;&#10;    });&#10;&#10;    // bill number should be the challan id itself&#10;    final billNumber = widget.rawChallanId;&#10;&#10;    final request = PosRequest(&#10;      amount: widget.amount,&#10;      tranType: 'SALE',&#10;      billNumber: billNumber,&#10;      sourceId: PaymentConfig.defaultConfig.sourceId,&#10;      printFlag: '1',&#10;      udf: {&#10;        'UDF1': widget.rawChallanId,&#10;        'UDF2': widget.violatorName,&#10;        'UDF3': widget.violatorMobile,&#10;        'UDF4': widget.challan['rule'] ?? '',&#10;        'UDF5': 'MUNICIPAL_CHALLAN',&#10;      },&#10;    );&#10;&#10;    try {&#10;      final response = await _paymentService.processPayment(request);&#10;      if (response.isSuccess) {&#10;        final transaction = PaymentTransaction(&#10;          transactionId: _generateTransactionId(),&#10;          challanId: widget.rawChallanId,&#10;          amount: widget.amount,&#10;          paymentMethod: 'CARD',&#10;          status: 'COMPLETED',&#10;          timestamp: DateTime.now(),&#10;          posResponse: response,&#10;          receiptNumber: response.receiptData?['InvoiceNr']?.toString(),&#10;        );&#10;&#10;        setState(() {&#10;          _transaction = transaction;&#10;          _isProcessing = false;&#10;        });&#10;&#10;        DashboardPage.challans[widget.index][&quot;status&quot;] = &quot;Paid&quot;;&#10;        ScaffoldMessenger.of(context).showSnackBar(SnackBar(&#10;          content: Text('Payment successful! Receipt: ${transaction.receiptNumber ?? ''}'),&#10;          backgroundColor: Colors.green,&#10;        ));&#10;      } else {&#10;        if (response.statusCode == 'MISSING_PLUGIN' ||&#10;            (response.statusMessage?.toLowerCase().contains('plugin') ?? false)) {&#10;          setState(() {&#10;            _posNotInstalled = true;&#10;            _isProcessing = false;&#10;          });&#10;        } else {&#10;          setState(() {&#10;            _errorMessage = response.statusMessage;&#10;            _isProcessing = false;&#10;          });&#10;        }&#10;      }&#10;    } catch (e) {&#10;      setState(() {&#10;        _errorMessage = 'Payment failed: $e';&#10;        _isProcessing = false;&#10;      });&#10;    }&#10;  }&#10;&#10;  /// Start Vizpay sale transaction (alias to _startCardPayment)&#10;  void _startVizpaySale(BuildContext context) =&gt; _startCardPayment(context);&#10;&#10;  /// UPI and cash handlers (simple simulations)&#10;  void _processUpiPayment(BuildContext context) async {&#10;    setState(() {&#10;      _isProcessing = true;&#10;      _processingMessage = 'Preparing UPI payment...';&#10;      _errorMessage = null;&#10;    });&#10;    await Future.delayed(const Duration(seconds: 2));&#10;    final transaction = PaymentTransaction(&#10;      transactionId: _generateTransactionId(),&#10;      challanId: widget.rawChallanId,&#10;      amount: widget.amount,&#10;      paymentMethod: 'UPI',&#10;      status: 'COMPLETED',&#10;      timestamp: DateTime.now(),&#10;      receiptNumber: 'UPI_${DateTime.now().millisecondsSinceEpoch}',&#10;    );&#10;    setState(() {&#10;      _transaction = transaction;&#10;      _isProcessing = false;&#10;    });&#10;    DashboardPage.challans[widget.index][&quot;status&quot;] = &quot;Paid&quot;;&#10;    ScaffoldMessenger.of(context).showSnackBar(SnackBar(&#10;      content: Text('UPI payment completed: ${transaction.receiptNumber}'),&#10;      backgroundColor: Colors.green,&#10;    ));&#10;  }&#10;&#10;  void _processCashPayment(BuildContext context) async {&#10;    setState(() {&#10;      _isProcessing = true;&#10;      _processingMessage = 'Processing cash payment...';&#10;      _errorMessage = null;&#10;    });&#10;    await Future.delayed(const Duration(seconds: 1));&#10;    final transaction = PaymentTransaction(&#10;      transactionId: _generateTransactionId(),&#10;      challanId: widget.rawChallanId,&#10;      amount: widget.amount,&#10;      paymentMethod: 'CASH',&#10;      status: 'COMPLETED',&#10;      timestamp: DateTime.now(),&#10;      receiptNumber: 'CASH_${DateTime.now().millisecondsSinceEpoch}',&#10;    );&#10;    setState(() {&#10;      _transaction = transaction;&#10;      _isProcessing = false;&#10;    });&#10;    DashboardPage.challans[widget.index][&quot;status&quot;] = &quot;Paid&quot;;&#10;    ScaffoldMessenger.of(context).showSnackBar(SnackBar(&#10;      content: Text('Cash payment recorded: ${transaction.receiptNumber}'),&#10;      backgroundColor: Colors.green,&#10;    ));&#10;  }&#10;&#10;  String _generateTransactionId() {&#10;    final timestamp = DateTime.now().millisecondsSinceEpoch;&#10;    final random = (timestamp % 10000).toString().padLeft(4, '0');&#10;    return 'TXN_${timestamp}_$random';&#10;  }&#10;}&#10;&#10;/// Helper method to build a receipt row (enhanced for better alignment and styling, with overflow prevention)&#10;Widget _buildReceiptRow({&#10;  required String label,&#10;  required String value,&#10;  bool isStatus = false,&#10;  bool isTotal = false,&#10;  IconData? icon,&#10;}) {&#10;  return Padding(&#10;    padding: const EdgeInsets.symmetric(vertical: 8.0),&#10;    child: Row(&#10;      crossAxisAlignment: CrossAxisAlignment.center,&#10;      children: [&#10;        Expanded(&#10;          flex: 2,&#10;          child: Row(&#10;            children: [&#10;              if (icon != null) ...[&#10;                Icon(icon, size: 14, color: Colors.grey[600]),&#10;                SizedBox(width: 6),&#10;              ],&#10;              Flexible(&#10;                child: Text(&#10;                  label,&#10;                  style: TextStyle(&#10;                    fontSize: 14,&#10;                    fontWeight: isTotal ? FontWeight.bold : FontWeight.w500,&#10;                    color: Colors.grey[800],&#10;                  ),&#10;                  overflow: TextOverflow.ellipsis,&#10;                  maxLines: 1,&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;        Expanded(&#10;          flex: 3,&#10;          child: Text(&#10;            value,&#10;            style: TextStyle(&#10;              fontSize: 14,&#10;              fontWeight: isTotal ? FontWeight.bold : FontWeight.w600,&#10;              color: isStatus&#10;                  ? Colors.green[700]&#10;                  : isTotal&#10;                  ? Colors.black87&#10;                  : Colors.grey[700],&#10;            ),&#10;            textAlign: TextAlign.right,&#10;            overflow: TextOverflow.ellipsis,&#10;            maxLines: 1,&#10;          ),&#10;        ),&#10;      ],&#10;    ),&#10;  );&#10;}&#10;&#10;/// Show receipt dialog&#10;Future&lt;void&gt; _showReceiptDialog(&#10;  BuildContext context,&#10;  Map&lt;String, dynamic&gt; challan, [&#10;  PaymentTransaction? transaction,&#10;]) async {&#10;  return showDialog&lt;void&gt;(&#10;    context: context,&#10;    barrierDismissible: false,&#10;    builder: (_) =&gt; Dialog(&#10;      insetPadding: const EdgeInsets.all(16),&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),&#10;      elevation: 8,&#10;      child: Container(&#10;        constraints: const BoxConstraints(maxWidth: 500, maxHeight: 600),&#10;        decoration: BoxDecoration(&#10;          borderRadius: BorderRadius.circular(20),&#10;          color: Colors.white,&#10;        ),&#10;        child: Column(&#10;          mainAxisSize: MainAxisSize.min,&#10;          children: [&#10;            Container(&#10;              width: double.infinity,&#10;              padding: const EdgeInsets.fromLTRB(20, 20, 20, 16),&#10;              decoration: const BoxDecoration(&#10;                color: Colors.green,&#10;                borderRadius: BorderRadius.vertical(top: Radius.circular(20)),&#10;              ),&#10;              child: SafeArea(&#10;                child: Row(&#10;                  mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                  children: [&#10;                    Row(&#10;                      children: [&#10;                        Icon(Icons.receipt_long, color: Colors.white, size: 28),&#10;                        const SizedBox(width: 12),&#10;                        const Text(&#10;                          &quot;PAYMENT RECEIPT&quot;,&#10;                          style: TextStyle(&#10;                            fontSize: 20,&#10;                            fontWeight: FontWeight.bold,&#10;                            color: Colors.white,&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                    IconButton(&#10;                      onPressed: () =&gt; Navigator.pop(context),&#10;                      icon: const Icon(&#10;                        Icons.close,&#10;                        color: Colors.white,&#10;                        size: 24,&#10;                      ),&#10;                      padding: EdgeInsets.zero,&#10;                      constraints: const BoxConstraints(&#10;                        minWidth: 32,&#10;                        minHeight: 32,&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            Container(&#10;              width: double.infinity,&#10;              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 20),&#10;              color: Colors.grey[50],&#10;              child: const Center(&#10;                child: Text(&#10;                  &quot;Municipal Corporation Bilaspur&quot;,&#10;                  style: TextStyle(&#10;                    fontSize: 16,&#10;                    fontWeight: FontWeight.bold,&#10;                    color: Colors.black87,&#10;                  ),&#10;                ),&#10;              ),&#10;            ),&#10;            Flexible(&#10;              child: SingleChildScrollView(&#10;                padding: const EdgeInsets.all(20),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    _buildReceiptRow(&#10;                      label: &quot;Receipt No.&quot;,&#10;                      value: &quot;#${DateTime.now().millisecondsSinceEpoch}&quot;,&#10;                      icon: Icons.receipt,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Date &amp; Time&quot;,&#10;                      value: DateFormat(&#10;                        'dd/MM/yyyy hh:mm a',&#10;                      ).format(DateTime.now()),&#10;                      icon: Icons.calendar_today,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Name&quot;,&#10;                      value: challan['name'] ?? 'N/A',&#10;                      icon: Icons.person,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Amount&quot;,&#10;                      value: &quot;â‚¹${challan['amount'] ?? 0}&quot;,&#10;                      icon: Icons.attach_money,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Payment Mode&quot;,&#10;                      value: &quot;Cash&quot;,&#10;                      icon: Icons.payment,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Status&quot;,&#10;                      value: &quot;Paid&quot;,&#10;                      isStatus: true,&#10;                      icon: Icons.check_circle,&#10;                    ),&#10;                    const SizedBox(height: 24),&#10;                    Divider(&#10;                      thickness: 1.5,&#10;                      color: Colors.grey[300],&#10;                      height: 32,&#10;                    ),&#10;                    Padding(&#10;                      padding: EdgeInsets.symmetric(vertical: 8),&#10;                      child: Text(&#10;                        &quot;Additional Details&quot;,&#10;                        style: TextStyle(&#10;                          fontSize: 14,&#10;                          fontWeight: FontWeight.w600,&#10;                          color: Colors.grey[700],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Rule&quot;,&#10;                      value: challan['rule'] ?? 'N/A',&#10;                      icon: Icons.rule,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Total Amount&quot;,&#10;                      value: &quot;â‚¹${challan['amount'] ?? 0}&quot;,&#10;                      isTotal: true,&#10;                      icon: Icons.calculate,&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            Container(&#10;              padding: const EdgeInsets.all(20),&#10;              decoration: BoxDecoration(&#10;                color: Colors.grey[50],&#10;                borderRadius: const BorderRadius.vertical(&#10;                  bottom: Radius.circular(20),&#10;                ),&#10;              ),&#10;              child: Row(&#10;                children: [&#10;                  Expanded(&#10;                    child: OutlinedButton.icon(&#10;                      onPressed: () =&gt; Navigator.pop(context),&#10;                      icon: const Icon(Icons.close, size: 20),&#10;                      label: const Text(&quot;CLOSE&quot;),&#10;                      style: OutlinedButton.styleFrom(&#10;                        padding: const EdgeInsets.symmetric(vertical: 12),&#10;                        side: BorderSide(color: Colors.grey[400]!),&#10;                        shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12),&#10;                        ),&#10;                      ),&#10;                    ),&#10;                  ),&#10;                  const SizedBox(width: 12),&#10;                  Expanded(&#10;                    child: ElevatedButton.icon(&#10;                      onPressed: () {&#10;                        _printReceipt(challan);&#10;                        Navigator.pop(context);&#10;                      },&#10;                      icon: const Icon(Icons.print, size: 20),&#10;                      label: const Text(&quot;PRINT&quot;),&#10;                      style: ElevatedButton.styleFrom(&#10;                        backgroundColor: Colors.green,&#10;                        foregroundColor: Colors.white,&#10;                        padding: const EdgeInsets.symmetric(vertical: 12),&#10;                        shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12),&#10;                        ),&#10;                        elevation: 2,&#10;                      ),&#10;                    ),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;Future&lt;void&gt; _printReceipt(Map&lt;String, dynamic&gt; challan) async {&#10;  final pdf = pw.Document();&#10;&#10;  pdf.addPage(&#10;    pw.Page(&#10;      pageFormat: PdfPageFormat.a4,&#10;      build: (pw.Context context) =&gt; pw.Center(&#10;        child: pw.Container(&#10;          width: double.infinity,&#10;          padding: const pw.EdgeInsets.all(40),&#10;          child: pw.Column(&#10;            crossAxisAlignment: pw.CrossAxisAlignment.center,&#10;            mainAxisAlignment: pw.MainAxisAlignment.start,&#10;            children: [&#10;              pw.Container(&#10;                alignment: pw.Alignment.center,&#10;                child: pw.Column(&#10;                  children: [&#10;                    pw.Text(&#10;                      'Municipal Corporation Bilaspur',&#10;                      style: pw.TextStyle(&#10;                        fontSize: 20,&#10;                        fontWeight: pw.FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    pw.SizedBox(height: 10),&#10;                    pw.Text(&#10;                      'PAYMENT RECEIPT',&#10;                      style: pw.TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: pw.FontWeight.bold,&#10;                        decoration: pw.TextDecoration.underline,&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;              pw.SizedBox(height: 30),&#10;              pw.Table(&#10;                border: pw.TableBorder.all(color: PdfColors.grey300, width: 1),&#10;                defaultColumnWidth: const pw.FlexColumnWidth(2),&#10;                children: [&#10;                  pw.TableRow(&#10;                    decoration: pw.BoxDecoration(color: PdfColors.grey100),&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          'Receipt No.:',&#10;                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),&#10;                        ),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          '#${DateTime.now().millisecondsSinceEpoch}',&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Date &amp; Time:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          DateFormat(&#10;                            'dd/MM/yyyy hh:mm a',&#10;                          ).format(DateTime.now()),&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Name:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(challan['name'] ?? 'N/A'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Amount:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('â‚¹${challan['amount'] ?? 0}'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Rule:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('${challan['rule'] ?? 0}'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Payment Mode:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Cash'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    decoration: pw.BoxDecoration(color: PdfColors.green100),&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          'Status:',&#10;                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),&#10;                        ),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          'Paid',&#10;                          style: pw.TextStyle(&#10;                            color: PdfColors.green800,&#10;                            fontWeight: pw.FontWeight.bold,&#10;                          ),&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                ],&#10;              ),&#10;              pw.SizedBox(height: 40),&#10;              pw.Divider(thickness: 2),&#10;              pw.SizedBox(height: 10),&#10;              pw.Container(&#10;                alignment: pw.Alignment.center,&#10;                child: pw.Text(&#10;                  'Thank you for your payment!',&#10;                  style: pw.TextStyle(&#10;                    fontSize: 14,&#10;                    fontStyle: pw.FontStyle.italic,&#10;                  ),&#10;                ),&#10;              ),&#10;              pw.SizedBox(height: 20),&#10;              pw.Container(&#10;                width: double.infinity,&#10;                child: pw.Row(&#10;                  children: [&#10;                    pw.Expanded(child: pw.Container()),&#10;                    pw.Text('Signature: ________________'),&#10;                    pw.Expanded(child: pw.Container()),&#10;                  ],&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  await Printing.layoutPdf(onLayout: (format) async =&gt; pdf.save());&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:barcode_widget/barcode_widget.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:intl/intl.dart';&#10;import 'package:municipal_e_challan/models/payment_models.dart';&#10;import 'package:municipal_e_challan/services/payment_service.dart';&#10;import 'package:pdf/pdf.dart';&#10;import 'package:pdf/widgets.dart' as pw;&#10;import 'package:printing/printing.dart';&#10;&#10;import 'dashboard_page.dart';&#10;&#10;/// Payment Page with BLoC integration for ICICI POS payments&#10;/// Provides multiple payment options: Card (POS), UPI, and Cash&#10;class PaymentPage extends StatelessWidget {&#10;  // index may be null if a full challan map is provided directly.&#10;  final int? index;&#10;&#10;  // Optional challan map - prefer this when provided to avoid indexing into the global list.&#10;  final Map&lt;String, dynamic&gt;? challan;&#10;&#10;  const PaymentPage({super.key, this.index, this.challan});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // Resolve challan map safely. Prefer provided challan, then try index lookup when valid,&#10;    // otherwise fall back to an empty map to avoid RangeError.&#10;    Map&lt;String, dynamic&gt; resolvedChallan = {};&#10;    int resolvedIndex = index ?? 0;&#10;    if (challan != null) {&#10;      resolvedChallan = Map&lt;String, dynamic&gt;.from(challan!);&#10;      // attempt to find its index in DashboardPage list if possible&#10;      final idx = DashboardPage.challans.indexWhere((c) {&#10;        try {&#10;          return c == resolvedChallan ||&#10;              (c['id'] != null &amp;&amp; c['id'] == resolvedChallan['id']);&#10;        } catch (_) {&#10;          return false;&#10;        }&#10;      });&#10;      if (idx != -1) resolvedIndex = idx;&#10;    } else if (index != null &amp;&amp;&#10;        index! &gt;= 0 &amp;&amp;&#10;        index! &lt; DashboardPage.challans.length) {&#10;      resolvedIndex = index!;&#10;      resolvedChallan = Map&lt;String, dynamic&gt;.from(&#10;        DashboardPage.challans[resolvedIndex],&#10;      );&#10;    } else if (DashboardPage.challans.isNotEmpty) {&#10;      // fallback to first challan if available&#10;      resolvedChallan = Map&lt;String, dynamic&gt;.from(DashboardPage.challans[0]);&#10;      resolvedIndex = 0;&#10;    } else {&#10;      resolvedChallan = &lt;String, dynamic&gt;{};&#10;      resolvedIndex = 0;&#10;    }&#10;&#10;    final amount = resolvedChallan['amount']?.toString() ?? '0';&#10;    // Use a raw challan id internally (prefer explicit id field if present)&#10;    final rawChallanId =&#10;        (resolvedChallan['id']?.toString() ?? (resolvedIndex + 1).toString());&#10;    // Display-friendly challan id for UI&#10;    final challanId = 'CHALLAN_$rawChallanId';&#10;    final violatorName = resolvedChallan['name'] ?? '';&#10;    final violatorMobile = resolvedChallan['mobile'] ?? '';&#10;&#10;    // Create PaymentPageView (BLoC removed - using PaymentService directly)&#10;    return PaymentPageView(&#10;      index: resolvedIndex,&#10;      challan: resolvedChallan,&#10;      amount: amount,&#10;      challanId: challanId,&#10;      rawChallanId: rawChallanId,&#10;      violatorName: violatorName,&#10;      violatorMobile: violatorMobile,&#10;    );&#10;  }&#10;}&#10;&#10;/// Payment Page View Widget - handles UI rendering&#10;class PaymentPageView extends StatefulWidget {&#10;  final int index;&#10;  final Map&lt;String, dynamic&gt; challan;&#10;  final String amount;&#10;  final String challanId; // display id&#10;  final String rawChallanId; // actual challan id to use as bill number&#10;  final String violatorName;&#10;  final String violatorMobile;&#10;&#10;  const PaymentPageView({&#10;    super.key,&#10;    required this.index,&#10;    required this.challan,&#10;    required this.amount,&#10;    required this.challanId,&#10;    required this.rawChallanId,&#10;    required this.violatorName,&#10;    required this.violatorMobile,&#10;  });&#10;&#10;  @override&#10;  State&lt;PaymentPageView&gt; createState() =&gt; _PaymentPageViewState();&#10;}&#10;&#10;class _PaymentPageViewState extends State&lt;PaymentPageView&gt; {&#10;  late final IPaymentService _paymentService;&#10;  bool _isProcessing = false;&#10;  String _processingMessage = '';&#10;  PaymentTransaction? _transaction;&#10;  String? _errorMessage;&#10;  bool _posNotInstalled = false;&#10;  // Focus on card payment by default. Other methods can be enabled in config if needed.&#10;  List&lt;String&gt; _availablePaymentMethods = ['CARD'];&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _paymentService = PaymentServiceFactory.create(useMock: false);&#10;    _checkPosAvailability();&#10;  }&#10;&#10;  Future&lt;void&gt; _checkPosAvailability() async {&#10;    final installed = await _paymentService.isPosAppInstalled();&#10;    setState(() {&#10;      _posNotInstalled = !installed;&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(title: const Text(&quot;Payment Options&quot;), elevation: 0),&#10;      body: SingleChildScrollView(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            _buildChallanInfoCard(context),&#10;            const SizedBox(height: 24),&#10;            _buildPaymentAmountCard(),&#10;            const SizedBox(height: 24),&#10;            _buildPaymentOptions(context),&#10;            const SizedBox(height: 12),&#10;            _buildHelpInfo(),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build the payment UI based on current state&#10;  Widget _buildPaymentOptions(BuildContext context) {&#10;    if (_posNotInstalled) {&#10;      return _buildPosNotInstalledCard(&#10;        'ICICI POS integration is not available on this device. Please install/configure the POS plugin or use other payment options.',&#10;        context,&#10;      );&#10;    }&#10;&#10;    if (_isProcessing) {&#10;      return _buildProcessingCard(_processingMessage.isNotEmpty&#10;          ? _processingMessage&#10;          : 'Processing...');&#10;    }&#10;&#10;    if (_transaction != null) {&#10;      return _buildSuccessCard(context, _transaction!);&#10;    }&#10;&#10;    if (_errorMessage != null) {&#10;      return _buildFailureCard(_errorMessage!, context);&#10;    }&#10;&#10;    // Default: show available payment methods&#10;    return _buildPaymentMethodsCard(context);&#10;  }&#10;&#10;  /// Build challan information card&#10;  Widget _buildChallanInfoCard(BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(20),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Row(&#10;              children: [&#10;                Icon(&#10;                  Icons.receipt_long,&#10;                  color: Theme.of(context).colorScheme.primary,&#10;                ),&#10;                const SizedBox(width: 12),&#10;                Text(&#10;                  &quot;Challan Information&quot;,&#10;                  style: Theme.of(&#10;                    context,&#10;                  ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),&#10;                ),&#10;              ],&#10;            ),&#10;            const SizedBox(height: 16),&#10;            _buildInfoRow(&quot;Challan ID&quot;, widget.challanId),&#10;            _buildInfoRow(&quot;Violator Name&quot;, widget.violatorName),&#10;            _buildInfoRow(&quot;Mobile&quot;, widget.violatorMobile),&#10;            _buildInfoRow(&quot;Rule Violated&quot;, widget.challan['rule'] ?? ''),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build payment amount card&#10;  Widget _buildPaymentAmountCard() {&#10;    // Ensure the card expands to the full available width&#10;    return SizedBox(&#10;      width: double.infinity,&#10;      child: Card(&#10;        elevation: 4,&#10;        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;        child: Container(&#10;          width: double.infinity,&#10;          padding: const EdgeInsets.all(24),&#10;          child: Column(&#10;            crossAxisAlignment: CrossAxisAlignment.start,&#10;            children: [&#10;              Text(&#10;                &quot;Payable Amount&quot;,&#10;                style: TextStyle(fontSize: 18, color: Colors.grey[600]),&#10;              ),&#10;              const SizedBox(height: 8),&#10;              Text(&#10;                &quot;â‚¹${widget.amount}&quot;,&#10;                style: TextStyle(&#10;                  fontSize: 36,&#10;                  fontWeight: FontWeight.bold,&#10;                  color: Colors.indigo,&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build payment methods selection card&#10;  Widget _buildPaymentMethodsCard(BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(20),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Text(&#10;              &quot;Select Payment Method&quot;,&#10;              style: Theme.of(&#10;                context,&#10;              ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),&#10;            ),&#10;            const SizedBox(height: 20),&#10;&#10;            // Card Payment Option&#10;            if (_availablePaymentMethods.contains('CARD'))&#10;              _buildPaymentMethodButton(&#10;                context: context,&#10;                icon: Icons.credit_card,&#10;                title: &quot;Card Payment&quot;,&#10;                subtitle: &quot;Pay using debit/credit card via ICICI POS&quot;,&#10;                color: Colors.blue,&#10;                onTap: () =&gt; _startVizpaySale(context),&#10;              ),&#10;&#10;            if (_availablePaymentMethods.contains('CARD'))&#10;              const SizedBox(height: 12),&#10;            // QR Payment Option&#10;            if (_availablePaymentMethods.contains('UPI'))&#10;              _buildPaymentMethodButton(&#10;                context: context,&#10;                icon: Icons.qr_code,&#10;                title: &quot;UPI Payment&quot;,&#10;                subtitle: &quot;Pay using QR code scanning&quot;,&#10;                color: Colors.teal,&#10;                onTap: () =&gt; _processUpiPayment(context),&#10;              ),&#10;&#10;            const SizedBox(height: 12),&#10;&#10;            // Cash Payment Option&#10;            if (_availablePaymentMethods.contains('CASH'))&#10;              _buildPaymentMethodButton(&#10;                context: context,&#10;                icon: Icons.money,&#10;                title: &quot;Cash Payment&quot;,&#10;                subtitle: &quot;Pay in cash and receive receipt&quot;,&#10;                color: Colors.green,&#10;                onTap: () =&gt; _processCashPayment(context),&#10;              ),&#10;&#10;            if (_availablePaymentMethods.contains('CASH'))&#10;              const SizedBox(height: 12),&#10;&#10;            /*    // BQR Payment Option&#10;            _buildPaymentMethodButton(&#10;              context: context,&#10;              icon: Icons.qr_code_scanner,&#10;              title: &quot;BQR Payment&quot;,&#10;              subtitle: &quot;Pay using Bharat QR code&quot;,&#10;              color: Colors.orange,&#10;              onTap: () =&gt; _processBqrPayment(context),&#10;            );&#10;&#10;            const SizedBox(height: 12),*/&#10;&#10;            /*          // Cash at POS Option&#10;            _buildPaymentMethodButton(&#10;              context: context,&#10;              icon: Icons.point_of_sale,&#10;              title: &quot;Cash at POS&quot;,&#10;              subtitle: &quot;Pay cash at POS terminal&quot;,&#10;              color: Colors.brown,&#10;              onTap: () =&gt; _processCashAtPosPayment(context),&#10;            );*/&#10;&#10;            /*  const SizedBox(height: 12),&#10;&#10;            // Pre-Auth Option&#10;            _buildPaymentMethodButton(&#10;              context: context,&#10;              icon: Icons.lock_clock,&#10;              title: &quot;Pre-Auth Payment&quot;,&#10;              subtitle: &quot;Authorize payment before completion&quot;,&#10;              color: Colors.purple,&#10;              onTap: () =&gt; _processPreAuthPayment(context),&#10;            ),*/&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build individual payment method button&#10;  Widget _buildPaymentMethodButton({&#10;    required BuildContext context,&#10;    required IconData icon,&#10;    required String title,&#10;    required String subtitle,&#10;    required Color color,&#10;    required VoidCallback onTap,&#10;  }) {&#10;    return InkWell(&#10;      onTap: onTap,&#10;      borderRadius: BorderRadius.circular(12),&#10;      child: Container(&#10;        padding: const EdgeInsets.all(16),&#10;        decoration: BoxDecoration(&#10;          border: Border.all(color: color.withAlpha((0.3 * 255).round())),&#10;          borderRadius: BorderRadius.circular(12),&#10;        ),&#10;        child: Row(&#10;          children: [&#10;            Container(&#10;              padding: const EdgeInsets.all(12),&#10;              decoration: BoxDecoration(&#10;                color: color.withAlpha((0.1 * 255).round()),&#10;                borderRadius: BorderRadius.circular(8),&#10;              ),&#10;              child: Icon(icon, color: color, size: 24),&#10;            ),&#10;            const SizedBox(width: 16),&#10;            Expanded(&#10;              child: Column(&#10;                crossAxisAlignment: CrossAxisAlignment.start,&#10;                children: [&#10;                  Text(&#10;                    title,&#10;                    style: const TextStyle(&#10;                      fontSize: 16,&#10;                      fontWeight: FontWeight.bold,&#10;                    ),&#10;                  ),&#10;                  Text(&#10;                    subtitle,&#10;                    style: TextStyle(fontSize: 14, color: Colors.grey[600]),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;            Icon(Icons.arrow_forward_ios, color: color, size: 16),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build UPI payment card with QR code&#10;  Widget _buildUpiPaymentCard(BuildContext context, String qrData) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(20),&#10;        child: Column(&#10;          children: [&#10;            Text(&#10;              &quot;UPI Payment&quot;,&#10;              style: Theme.of(&#10;                context,&#10;              ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),&#10;            ),&#10;            const SizedBox(height: 20),&#10;            Text(&#10;              &quot;Scan QR code using any UPI app&quot;,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;            ),&#10;            const SizedBox(height: 20),&#10;            Container(&#10;              padding: const EdgeInsets.all(16),&#10;              decoration: BoxDecoration(&#10;                borderRadius: BorderRadius.circular(12),&#10;                border: Border.all(color: Colors.grey[300]!),&#10;              ),&#10;              child: BarcodeWidget(&#10;                barcode: Barcode.qrCode(&#10;                  errorCorrectLevel: BarcodeQRCorrectionLevel.high,&#10;                ),&#10;                data: qrData,&#10;                width: 200,&#10;                height: 200,&#10;                color: Colors.indigo,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Municipal Corporation&quot;,&#10;              style: TextStyle(fontSize: 14, color: Colors.grey[600]),&#10;            ),&#10;            const SizedBox(height: 20),&#10;            Row(&#10;              children: [&#10;                Expanded(&#10;                  child: OutlinedButton(&#10;                    onPressed: () {&#10;                      // Cancel UPI flow and reset&#10;                      setState(() {&#10;                        _isProcessing = false;&#10;                        _processingMessage = '';&#10;                        _errorMessage = null;&#10;                      });&#10;                    },&#10;                    child: const Text(&quot;Cancel&quot;),&#10;                  ),&#10;                ),&#10;                const SizedBox(width: 12),&#10;                Expanded(&#10;                  child: ElevatedButton(&#10;                    onPressed: () =&gt; _processUpiPayment(context),&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.green,&#10;                    ),&#10;                    child: const Text(&quot;Payment Done&quot;),&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build processing card&#10;  Widget _buildProcessingCard(String message) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            const CircularProgressIndicator(),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              message,&#10;              style: const TextStyle(fontSize: 16),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build success card&#10;  Widget _buildSuccessCard(BuildContext context, PaymentTransaction transaction) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            Icon(Icons.check_circle, color: Colors.green, size: 64),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Payment Successful!&quot;,&#10;              style: Theme.of(context).textTheme.titleLarge?.copyWith(&#10;                fontWeight: FontWeight.bold,&#10;                color: Colors.green,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 8),&#10;            Text(&#10;              &quot;Receipt Number: ${transaction.receiptNumber}&quot;,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;            ),&#10;            const SizedBox(height: 24),&#10;            SizedBox(&#10;              width: double.infinity,&#10;              child: ElevatedButton.icon(&#10;                onPressed: () =&gt; _showReceiptDialog(context, widget.challan, transaction),&#10;                icon: const Icon(Icons.receipt),&#10;                label: const Text(&quot;View Receipt&quot;),&#10;                style: ElevatedButton.styleFrom(&#10;                  backgroundColor: Colors.green,&#10;                  padding: const EdgeInsets.symmetric(vertical: 16),&#10;                ),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build failure card&#10;  Widget _buildFailureCard(String error, BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            Icon(Icons.error, color: Colors.red, size: 64),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Payment Failed&quot;,&#10;              style: const TextStyle(&#10;                fontSize: 20,&#10;                fontWeight: FontWeight.bold,&#10;                color: Colors.red,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 8),&#10;            Text(&#10;              error,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;            const SizedBox(height: 24),&#10;            SizedBox(&#10;              width: double.infinity,&#10;              child: ElevatedButton(&#10;                onPressed: () {&#10;                  setState(() {&#10;                    _errorMessage = null;&#10;                    _transaction = null;&#10;                    _isProcessing = false;&#10;                  });&#10;                },&#10;                child: const Text(&quot;Try Again&quot;),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build POS not installed card&#10;  Widget _buildPosNotInstalledCard(String message, BuildContext context) {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            Icon(Icons.warning, color: Colors.orange, size: 64),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;POS App Not Available&quot;,&#10;              style: const TextStyle(&#10;                fontSize: 20,&#10;                fontWeight: FontWeight.bold,&#10;                color: Colors.orange,&#10;              ),&#10;            ),&#10;            const SizedBox(height: 8),&#10;            Text(&#10;              message,&#10;              style: TextStyle(color: Colors.grey[600]),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;            const SizedBox(height: 24),&#10;            SizedBox(&#10;              width: double.infinity,&#10;              child: ElevatedButton(&#10;                onPressed: () {&#10;                  setState(() {&#10;                    _posNotInstalled = false;&#10;                  });&#10;                },&#10;                child: const Text(&quot;Continue with Other Options&quot;),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build loading card&#10;  Widget _buildLoadingCard() {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: const Padding(&#10;        padding: EdgeInsets.all(24),&#10;        child: Center(child: CircularProgressIndicator()),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build cash processing card&#10;  Widget _buildCashProcessingCard() {&#10;    return Card(&#10;      elevation: 4,&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(24),&#10;        child: Column(&#10;          children: [&#10;            const CircularProgressIndicator(),&#10;            const SizedBox(height: 16),&#10;            Text(&#10;              &quot;Processing Cash Payment...&quot;,&#10;              style: const TextStyle(fontSize: 16),&#10;              textAlign: TextAlign.center,&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build help information&#10;  Widget _buildHelpInfo() {&#10;    return Container(&#10;      padding: const EdgeInsets.all(16),&#10;      decoration: BoxDecoration(&#10;        color: Colors.grey[100],&#10;        borderRadius: BorderRadius.circular(12),&#10;      ),&#10;      child: Column(&#10;        children: [&#10;          Icon(Icons.info_outline, color: Colors.indigo, size: 24),&#10;          const SizedBox(height: 8),&#10;          Text(&#10;            &quot;Choose your preferred payment method. All payments are secure and processed through ICICI Bank.&quot;,&#10;            textAlign: TextAlign.center,&#10;            style: TextStyle(fontSize: 14, color: Colors.grey[800]),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Build info row for challan details&#10;  Widget _buildInfoRow(String label, String value) {&#10;    return Padding(&#10;      padding: const EdgeInsets.symmetric(vertical: 4),&#10;      child: Row(&#10;        crossAxisAlignment: CrossAxisAlignment.start,&#10;        children: [&#10;          SizedBox(&#10;            width: 100,&#10;            child: Text(&#10;              &quot;$label:&quot;,&#10;              style: TextStyle(&#10;                fontWeight: FontWeight.w500,&#10;                color: Colors.grey[700],&#10;              ),&#10;            ),&#10;          ),&#10;          Expanded(&#10;            child: Text(&#10;              value,&#10;              style: const TextStyle(fontWeight: FontWeight.w500),&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  /// Start card payment using PaymentService directly&#10;  Future&lt;void&gt; _startCardPayment(BuildContext context) async {&#10;    setState(() {&#10;      _isProcessing = true;&#10;      _processingMessage = 'Processing Card Payment...';&#10;      _errorMessage = null;&#10;    });&#10;&#10;    // bill number should be the challan id itself&#10;    final billNumber = widget.rawChallanId;&#10;&#10;    final request = PosRequest(&#10;      amount: widget.amount,&#10;      tranType: 'SALE',&#10;      billNumber: billNumber,&#10;      sourceId: PaymentConfig.defaultConfig.sourceId,&#10;      printFlag: '1',&#10;      udf: {&#10;        'UDF1': widget.rawChallanId,&#10;        'UDF2': widget.violatorName,&#10;        'UDF3': widget.violatorMobile,&#10;        'UDF4': widget.challan['rule'] ?? '',&#10;        'UDF5': 'MUNICIPAL_CHALLAN',&#10;      },&#10;    );&#10;&#10;    try {&#10;      final response = await _paymentService.processPayment(request);&#10;      if (response.isSuccess) {&#10;        final transaction = PaymentTransaction(&#10;          transactionId: _generateTransactionId(),&#10;          challanId: widget.rawChallanId,&#10;          amount: widget.amount,&#10;          paymentMethod: 'CARD',&#10;          status: 'COMPLETED',&#10;          timestamp: DateTime.now(),&#10;          posResponse: response,&#10;          receiptNumber: response.receiptData?['InvoiceNr']?.toString(),&#10;        );&#10;&#10;        setState(() {&#10;          _transaction = transaction;&#10;          _isProcessing = false;&#10;        });&#10;&#10;        DashboardPage.challans[widget.index][&quot;status&quot;] = &quot;Paid&quot;;&#10;        ScaffoldMessenger.of(context).showSnackBar(SnackBar(&#10;          content: Text('Payment successful! Receipt: ${transaction.receiptNumber ?? ''}'),&#10;          backgroundColor: Colors.green,&#10;        ));&#10;      } else {&#10;        if (response.statusCode == 'MISSING_PLUGIN' ||&#10;            (response.statusMessage?.toLowerCase().contains('plugin') ?? false)) {&#10;          setState(() {&#10;            _posNotInstalled = true;&#10;            _isProcessing = false;&#10;          });&#10;        } else {&#10;          setState(() {&#10;            _errorMessage = response.statusMessage;&#10;            _isProcessing = false;&#10;          });&#10;        }&#10;      }&#10;    } catch (e) {&#10;      setState(() {&#10;        _errorMessage = 'Payment failed: $e';&#10;        _isProcessing = false;&#10;      });&#10;    }&#10;  }&#10;&#10;  /// Start Vizpay sale transaction (alias to _startCardPayment)&#10;  void _startVizpaySale(BuildContext context) =&gt; _startCardPayment(context);&#10;&#10;  /// UPI and cash handlers (simple simulations)&#10;  void _processUpiPayment(BuildContext context) async {&#10;    setState(() {&#10;      _isProcessing = true;&#10;      _processingMessage = 'Preparing UPI payment...';&#10;      _errorMessage = null;&#10;    });&#10;    await Future.delayed(const Duration(seconds: 2));&#10;    final transaction = PaymentTransaction(&#10;      transactionId: _generateTransactionId(),&#10;      challanId: widget.rawChallanId,&#10;      amount: widget.amount,&#10;      paymentMethod: 'UPI',&#10;      status: 'COMPLETED',&#10;      timestamp: DateTime.now(),&#10;      receiptNumber: 'UPI_${DateTime.now().millisecondsSinceEpoch}',&#10;    );&#10;    setState(() {&#10;      _transaction = transaction;&#10;      _isProcessing = false;&#10;    });&#10;    DashboardPage.challans[widget.index][&quot;status&quot;] = &quot;Paid&quot;;&#10;    ScaffoldMessenger.of(context).showSnackBar(SnackBar(&#10;      content: Text('UPI payment completed: ${transaction.receiptNumber}'),&#10;      backgroundColor: Colors.green,&#10;    ));&#10;  }&#10;&#10;  void _processCashPayment(BuildContext context) async {&#10;    setState(() {&#10;      _isProcessing = true;&#10;      _processingMessage = 'Processing cash payment...';&#10;      _errorMessage = null;&#10;    });&#10;    await Future.delayed(const Duration(seconds: 1));&#10;    final transaction = PaymentTransaction(&#10;      transactionId: _generateTransactionId(),&#10;      challanId: widget.rawChallanId,&#10;      amount: widget.amount,&#10;      paymentMethod: 'CASH',&#10;      status: 'COMPLETED',&#10;      timestamp: DateTime.now(),&#10;      receiptNumber: 'CASH_${DateTime.now().millisecondsSinceEpoch}',&#10;    );&#10;    setState(() {&#10;      _transaction = transaction;&#10;      _isProcessing = false;&#10;    });&#10;    DashboardPage.challans[widget.index][&quot;status&quot;] = &quot;Paid&quot;;&#10;    ScaffoldMessenger.of(context).showSnackBar(SnackBar(&#10;      content: Text('Cash payment recorded: ${transaction.receiptNumber}'),&#10;      backgroundColor: Colors.green,&#10;    ));&#10;  }&#10;&#10;  String _generateTransactionId() {&#10;    final timestamp = DateTime.now().millisecondsSinceEpoch;&#10;    final random = (timestamp % 10000).toString().padLeft(4, '0');&#10;    return 'TXN_${timestamp}_$random';&#10;  }&#10;}&#10;&#10;/// Helper method to build a receipt row (enhanced for better alignment and styling, with overflow prevention)&#10;Widget _buildReceiptRow({&#10;  required String label,&#10;  required String value,&#10;  bool isStatus = false,&#10;  bool isTotal = false,&#10;  IconData? icon,&#10;}) {&#10;  return Padding(&#10;    padding: const EdgeInsets.symmetric(vertical: 8.0),&#10;    child: Row(&#10;      crossAxisAlignment: CrossAxisAlignment.center,&#10;      children: [&#10;        Expanded(&#10;          flex: 2,&#10;          child: Row(&#10;            children: [&#10;              if (icon != null) ...[&#10;                Icon(icon, size: 14, color: Colors.grey[600]),&#10;                SizedBox(width: 6),&#10;              ],&#10;              Flexible(&#10;                child: Text(&#10;                  label,&#10;                  style: TextStyle(&#10;                    fontSize: 14,&#10;                    fontWeight: isTotal ? FontWeight.bold : FontWeight.w500,&#10;                    color: Colors.grey[800],&#10;                  ),&#10;                  overflow: TextOverflow.ellipsis,&#10;                  maxLines: 1,&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;        Expanded(&#10;          flex: 3,&#10;          child: Text(&#10;            value,&#10;            style: TextStyle(&#10;              fontSize: 14,&#10;              fontWeight: isTotal ? FontWeight.bold : FontWeight.w600,&#10;              color: isStatus&#10;                  ? Colors.green[700]&#10;                  : isTotal&#10;                  ? Colors.black87&#10;                  : Colors.grey[700],&#10;            ),&#10;            textAlign: TextAlign.right,&#10;            overflow: TextOverflow.ellipsis,&#10;            maxLines: 1,&#10;          ),&#10;        ),&#10;      ],&#10;    ),&#10;  );&#10;}&#10;&#10;/// Show receipt dialog&#10;Future&lt;void&gt; _showReceiptDialog(&#10;  BuildContext context,&#10;  Map&lt;String, dynamic&gt; challan, [&#10;  PaymentTransaction? transaction,&#10;]) async {&#10;  return showDialog&lt;void&gt;(&#10;    context: context,&#10;    barrierDismissible: false,&#10;    builder: (_) =&gt; Dialog(&#10;      insetPadding: const EdgeInsets.all(16),&#10;      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),&#10;      elevation: 8,&#10;      child: Container(&#10;        constraints: const BoxConstraints(maxWidth: 500, maxHeight: 600),&#10;        decoration: BoxDecoration(&#10;          borderRadius: BorderRadius.circular(20),&#10;          color: Colors.white,&#10;        ),&#10;        child: Column(&#10;          mainAxisSize: MainAxisSize.min,&#10;          children: [&#10;            Container(&#10;              width: double.infinity,&#10;              padding: const EdgeInsets.fromLTRB(20, 20, 20, 16),&#10;              decoration: const BoxDecoration(&#10;                color: Colors.green,&#10;                borderRadius: BorderRadius.vertical(top: Radius.circular(20)),&#10;              ),&#10;              child: SafeArea(&#10;                child: Row(&#10;                  mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                  children: [&#10;                    Row(&#10;                      children: [&#10;                        Icon(Icons.receipt_long, color: Colors.white, size: 28),&#10;                        const SizedBox(width: 12),&#10;                        const Text(&#10;                          &quot;PAYMENT RECEIPT&quot;,&#10;                          style: TextStyle(&#10;                            fontSize: 20,&#10;                            fontWeight: FontWeight.bold,&#10;                            color: Colors.white,&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                    IconButton(&#10;                      onPressed: () =&gt; Navigator.pop(context),&#10;                      icon: const Icon(&#10;                        Icons.close,&#10;                        color: Colors.white,&#10;                        size: 24,&#10;                      ),&#10;                      padding: EdgeInsets.zero,&#10;                      constraints: const BoxConstraints(&#10;                        minWidth: 32,&#10;                        minHeight: 32,&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            Container(&#10;              width: double.infinity,&#10;              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 20),&#10;              color: Colors.grey[50],&#10;              child: const Center(&#10;                child: Text(&#10;                  &quot;Municipal Corporation Bilaspur&quot;,&#10;                  style: TextStyle(&#10;                    fontSize: 16,&#10;                    fontWeight: FontWeight.bold,&#10;                    color: Colors.black87,&#10;                  ),&#10;                ),&#10;              ),&#10;            ),&#10;            Flexible(&#10;              child: SingleChildScrollView(&#10;                padding: const EdgeInsets.all(20),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    _buildReceiptRow(&#10;                      label: &quot;Receipt No.&quot;,&#10;                      value: &quot;#${DateTime.now().millisecondsSinceEpoch}&quot;,&#10;                      icon: Icons.receipt,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Date &amp; Time&quot;,&#10;                      value: DateFormat(&#10;                        'dd/MM/yyyy hh:mm a',&#10;                      ).format(DateTime.now()),&#10;                      icon: Icons.calendar_today,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Name&quot;,&#10;                      value: challan['name'] ?? 'N/A',&#10;                      icon: Icons.person,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Amount&quot;,&#10;                      value: &quot;â‚¹${challan['amount'] ?? 0}&quot;,&#10;                      icon: Icons.attach_money,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Payment Mode&quot;,&#10;                      value: &quot;Cash&quot;,&#10;                      icon: Icons.payment,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Status&quot;,&#10;                      value: &quot;Paid&quot;,&#10;                      isStatus: true,&#10;                      icon: Icons.check_circle,&#10;                    ),&#10;                    const SizedBox(height: 24),&#10;                    Divider(&#10;                      thickness: 1.5,&#10;                      color: Colors.grey[300],&#10;                      height: 32,&#10;                    ),&#10;                    Padding(&#10;                      padding: EdgeInsets.symmetric(vertical: 8),&#10;                      child: Text(&#10;                        &quot;Additional Details&quot;,&#10;                        style: TextStyle(&#10;                          fontSize: 14,&#10;                          fontWeight: FontWeight.w600,&#10;                          color: Colors.grey[700],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Rule&quot;,&#10;                      value: challan['rule'] ?? 'N/A',&#10;                      icon: Icons.rule,&#10;                    ),&#10;                    _buildReceiptRow(&#10;                      label: &quot;Total Amount&quot;,&#10;                      value: &quot;â‚¹${challan['amount'] ?? 0}&quot;,&#10;                      isTotal: true,&#10;                      icon: Icons.calculate,&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            Container(&#10;              padding: const EdgeInsets.all(20),&#10;              decoration: BoxDecoration(&#10;                color: Colors.grey[50],&#10;                borderRadius: const BorderRadius.vertical(&#10;                  bottom: Radius.circular(20),&#10;                ),&#10;              ),&#10;              child: Row(&#10;                children: [&#10;                  Expanded(&#10;                    child: OutlinedButton.icon(&#10;                      onPressed: () =&gt; Navigator.pop(context),&#10;                      icon: const Icon(Icons.close, size: 20),&#10;                      label: const Text(&quot;CLOSE&quot;),&#10;                      style: OutlinedButton.styleFrom(&#10;                        padding: const EdgeInsets.symmetric(vertical: 12),&#10;                        side: BorderSide(color: Colors.grey[400]!),&#10;                        shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12),&#10;                        ),&#10;                      ),&#10;                    ),&#10;                  ),&#10;                  const SizedBox(width: 12),&#10;                  Expanded(&#10;                    child: ElevatedButton.icon(&#10;                      onPressed: () {&#10;                        _printReceipt(challan);&#10;                        Navigator.pop(context);&#10;                      },&#10;                      icon: const Icon(Icons.print, size: 20),&#10;                      label: const Text(&quot;PRINT&quot;),&#10;                      style: ElevatedButton.styleFrom(&#10;                        backgroundColor: Colors.green,&#10;                        foregroundColor: Colors.white,&#10;                        padding: const EdgeInsets.symmetric(vertical: 12),&#10;                        shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12),&#10;                        ),&#10;                        elevation: 2,&#10;                      ),&#10;                    ),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;Future&lt;void&gt; _printReceipt(Map&lt;String, dynamic&gt; challan) async {&#10;  final pdf = pw.Document();&#10;&#10;  pdf.addPage(&#10;    pw.Page(&#10;      pageFormat: PdfPageFormat.a4,&#10;      build: (pw.Context context) =&gt; pw.Center(&#10;        child: pw.Container(&#10;          width: double.infinity,&#10;          padding: const pw.EdgeInsets.all(40),&#10;          child: pw.Column(&#10;            crossAxisAlignment: pw.CrossAxisAlignment.center,&#10;            mainAxisAlignment: pw.MainAxisAlignment.start,&#10;            children: [&#10;              pw.Container(&#10;                alignment: pw.Alignment.center,&#10;                child: pw.Column(&#10;                  children: [&#10;                    pw.Text(&#10;                      'Municipal Corporation Bilaspur',&#10;                      style: pw.TextStyle(&#10;                        fontSize: 20,&#10;                        fontWeight: pw.FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    pw.SizedBox(height: 10),&#10;                    pw.Text(&#10;                      'PAYMENT RECEIPT',&#10;                      style: pw.TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: pw.FontWeight.bold,&#10;                        decoration: pw.TextDecoration.underline,&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;              pw.SizedBox(height: 30),&#10;              pw.Table(&#10;                border: pw.TableBorder.all(color: PdfColors.grey300, width: 1),&#10;                defaultColumnWidth: const pw.FlexColumnWidth(2),&#10;                children: [&#10;                  pw.TableRow(&#10;                    decoration: pw.BoxDecoration(color: PdfColors.grey100),&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          'Receipt No.:',&#10;                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),&#10;                        ),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          '#${DateTime.now().millisecondsSinceEpoch}',&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Date &amp; Time:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          DateFormat(&#10;                            'dd/MM/yyyy hh:mm a',&#10;                          ).format(DateTime.now()),&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Name:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(challan['name'] ?? 'N/A'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Amount:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('â‚¹${challan['amount'] ?? 0}'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Rule:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('${challan['rule'] ?? 0}'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Payment Mode:'),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text('Cash'),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                  pw.TableRow(&#10;                    decoration: pw.BoxDecoration(color: PdfColors.green100),&#10;                    children: [&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          'Status:',&#10;                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),&#10;                        ),&#10;                      ),&#10;                      pw.Padding(&#10;                        padding: const pw.EdgeInsets.all(8),&#10;                        child: pw.Text(&#10;                          'Paid',&#10;                          style: pw.TextStyle(&#10;                            color: PdfColors.green800,&#10;                            fontWeight: pw.FontWeight.bold,&#10;                          ),&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                ],&#10;              ),&#10;              pw.SizedBox(height: 40),&#10;              pw.Divider(thickness: 2),&#10;              pw.SizedBox(height: 10),&#10;              pw.Container(&#10;                alignment: pw.Alignment.center,&#10;                child: pw.Text(&#10;                  'Thank you for your payment!',&#10;                  style: pw.TextStyle(&#10;                    fontSize: 14,&#10;                    fontStyle: pw.FontStyle.italic,&#10;                  ),&#10;                ),&#10;              ),&#10;              pw.SizedBox(height: 20),&#10;              pw.Container(&#10;                width: double.infinity,&#10;                child: pw.Row(&#10;                  children: [&#10;                    pw.Expanded(child: pw.Container()),&#10;                    pw.Text('Signature: ________________'),&#10;                    pw.Expanded(child: pw.Container()),&#10;                  ],&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  await Printing.layoutPdf(onLayout: (format) async =&gt; pdf.save());&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>